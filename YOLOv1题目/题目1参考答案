import torch
import torch.nn as nn
class convolutional(nn.Module):
    def __init__(self,batch_normalize,filters,size,stride,pad,activation,input_channels):
        super(convolutional,self).__init__()
        model = [nn.Conv2d(input_channels,filters,size,stride,pad)]
        if batch_normalize == 1:
            model.append(nn.BatchNorm2d(filters))
        if activation == 'leaky':
            model.append(nn.Relu())
        self.model = nn.Sequential(*model)
    def forward(self,x):
        return self.model(x)
class YOLOv1(nn.Module):
    def __init__(self):
        super(YOLOv1,self).__init__()
        model = [convolutional(1, 64, 7, 2, 1,'leaky',3), 
                 nn.MaxPool2d(2,stride=2),
                 convolutional(1,192,3,1,1,'leaky',64),
                 nn.MaxPool2d(2,stride=2),
                 convolutional(1,128,1,1,1,'leaky',192),
                 convolutional(1,256,1,1,1,'leaky',128),
                 convolutional(1,512,3,1,1,'leaky',256),
                 nn.MaxPool2d(2,2)
                ]
        for _ in range(4):
            model +=[ 
                 convolutional(1,256,1,1,1,'leaky',512),
                 convolutional(1,512,3,1,1,'leaky',256)
            ]
        model += [
            convolutional(1,512,1,1,1,'leaky'),
            convolutional(1,1024,3,1,1,'leaky',512),
            nn.MaxPool2d(2,2)
        ]
        for _ in range(2):
            model +=[
                convolutional(1,512,1,1,1,'leaky',1024),
                convolutional(1,1024,3,1,1,'leaky',512)
            ]
        model += [
            convolutional(1,1024,3,1,1,'leaky',1024),
            convolutional(1,1024,3,2,1,'leaky',1024)，
            convolutional(1,1024,3,1,1,'leaky',1024),
            convolutional(1,1024,3,1,1,'leaky',1024)
        ]
        model +=[
            convolutional(0,256,3,1,1,'leaky',1024),#replace local layer 
            nn.Dropout(),                            #default is 0.5
            nn.Linear(7*7*1024,4096) #待定 
            nn.Conv2d(4096,30,4096)  #待定
        ]
        
        self.model = nn.Sequential(*model)
    def forward(self,x):
        return self.model(x)
